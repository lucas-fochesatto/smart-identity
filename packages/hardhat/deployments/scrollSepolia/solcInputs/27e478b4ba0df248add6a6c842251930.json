{
  "language": "Solidity",
  "sources": {
    "contracts/Database.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract Database {\n\n    bool notification;\n\n    struct Person {\n        string name;\n        uint256 cpf;\n        uint256 id;\n        address mae;\n        address pai;\n        string dataNascimento;\n        string naturalidade;\n        string nacionalidade;\n        string sexo;\n        bool changed;\n    }\n\n    struct Horario {\n        string hora;\n        string minuto;  \n    }\n\n    struct Digital {\n        uint256 digital;\n    }\n\n    struct Local {\n        string complemento;\n        string municipio;\n        string uf;\n    }\n\n    struct Data {\n        string dia;\n        string mes;\n        string ano;\n    }\n\n    struct DocumentNascimento {\n        uint256 matricula;\n        Local localNascimento;\n        Local localRegistro;\n        Horario horaNascimento;\n        Data dataRegistro;\n        string numeroDNV;\n    }\n\n    modifier onlyAdmin {\n        require(admins[msg.sender] == true, \"You are not an admin!\");\n        _;\n    }\n\n    constructor() {\n        admins[msg.sender] = true;\n    }\n    \n    mapping(address => bool) public admins;\n\n    mapping(address => Person) public idChain;\n\n    mapping(uint256 => address) digitalChain;\n\n    mapping(address => DocumentNascimento) documentNascimentoChain;\n\n\n    function getPersonByWallet(address _wallet) public view onlyAdmin returns(Person memory person){\n        require(idChain[_wallet].cpf != 0, \"This person is not registred!\");\n        return idChain[_wallet];\n    }\n\n    function addAdmin(address _wallet) public onlyAdmin {\n        require(idChain[_wallet].cpf != 0, \"This person is not registred!\");\n        admins[_wallet] = true;\n    }\n\n    function editName(address _wallet, string memory _newName) public onlyAdmin {\n        require(idChain[_wallet].cpf != 0, \"This person is not registred!\");\n        idChain[_wallet].name = _newName;\n        idChain[_wallet].changed = true;\n    }\n\n    function recoverWallet(Digital memory digital) public view onlyAdmin returns(address wallet) {\n        return(digitalChain[digital.digital]);\n    }\n\n    function addPerson(address _wallet, Person memory person) public onlyAdmin {\n        idChain[_wallet] = person;\n    }\n\n    function getPersonData() public view returns(Person memory) {\n        return idChain[msg.sender];\n    }\n\n    function update() public {\n        if(idChain[idChain[msg.sender].mae].changed == true || idChain[idChain[msg.sender].pai].changed == true) {\n            notification = true;\n        }\n        idChain[idChain[msg.sender].mae].changed = false;\n        idChain[idChain[msg.sender].pai].changed = false;\n    }\n       \n    function addDocumentNascimento(\n        address wallet,\n        uint256 matricula,\n        Local memory localNascimento,\n        Local memory localRegistro,\n        Horario memory horaNascimento,\n        Data memory dataRegistro,\n        string memory numeroDNV\n    ) public onlyAdmin {\n        documentNascimentoChain[wallet] = DocumentNascimento(\n            matricula,\n            localNascimento,\n            localRegistro,\n            horaNascimento,\n            dataRegistro,\n            numeroDNV);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}